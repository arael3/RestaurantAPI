name: deploy
on:
  push:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Krok 1 - Uses the major version of a release
        # Odniesienie się do głównego wydania aplikacji
        uses: actions/checkout@v2
      - name: Krok 2 - Setup .NET Core SDK
        # Pobranie .NET Core SDK
        uses: actions/setup-dotnet@v3.0.3
        with:
          dotnet-version: 6.0.x
      - name: Krok 3 - Restore dependencies
        # Pobranie paczek Nuget
        run: dotnet restore
      - name: Krok 4 - Build
        # Zbudowanie aplikacji z projektu
        run: dotnet build --no-restore
      - name: Krok 5 - Publish
        # Publikacja: 
        # ./...  - określenie ścieżki projektu, który chcemy opublikować
        # -o ...  - określenie ścieżki, do której paczka zostanie wrzucona 
        run: dotnet publish ./RestaurantAPI/RestaurantAPI.csproj -c Release -o ${{ env.DOTNET_ROOT }}/api
      - name: Krok 6 - upload artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: api-artifact
          path: ${{ env.DOTNET_ROOT }}/api
  
  # Przykładowa konfiguracja deploy'a (na środowisko developerskie) na platformę Azure - parametry takie jak np. app-name, publish-profile 
  # należy ustawić tak, aby odpowiadały wybranym zasobom na Azure
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: 'Dev'
      url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    steps:
      - name: Krok 1 - Download a Build Artifact
        uses: actions/download-artifact@v3.0.1
        with:
          # Artifact name
          name: api-artifact
      - name: Krok 2 - Azure WebApp deploy
        id: deploy-to-azure
        uses: Azure/webapps-deploy@v2.2.5
        with:
          # Name of the Azure Web App
          app-name: 'restaurant-api-myapp'
          # Applies to Web Apps(Windows and Linux) and Web App Containers(linux). 
          # Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
          publish-profile: ${{ secrets.PUBLISH_PROFILE_DEV }}
          
  ## Oczywiście deploy'a można także przygotować pod środowisko produkcyjne
  ## Przykładowa konfiguracja deploy'a (na środowisko produkcyjne) na platformę Azure - parametry takie jak np. app-name, publish-profile 
  ## należy ustawić tak, aby odpowiadały wybranym zasobom na Azure
  #deploy-prod:
    #runs-on: ubuntu-latest
    #needs: deploy-dev
    #environment: 
      #name: 'Prod'
      #url: ${{ steps.deploy-to-azure.outputs.webapp-url }}
    #steps:
      #- name: Krok 1 - Download a Build Artifact
        #uses: actions/download-artifact@v3.0.1
        #with:
          ## Artifact name
          #name: api-artifact
      #- name: Krok 2 - Azure WebApp deploy
        #id: deploy-to-azure
        #uses: Azure/webapps-deploy@v2.2.5
        #with:
          ## Name of the Azure Web App
          #app-name: 'restaurant-api-myapp-prod'
          ## Applies to Web Apps(Windows and Linux) and Web App Containers(linux). 
          ## Multi container scenario not supported. Publish profile (*.publishsettings) file contents with Web Deploy secrets
          #publish-profile: ${{ secrets.PUBLISH_PROFILE_PROD }}

